{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../mylaps-amb/dist/index.js","webpack:///../mylaps-amb/dist/utils/BufferHelper.js","webpack:///../mylaps-amb/node_modules/long/src/long.js","webpack:///./electron/main.ts","webpack:///external \"dgram\"","webpack:///external \"electron\"","webpack:///external \"events\"","webpack:///external \"net\"","webpack:///external \"path\"","webpack:///external \"url\""],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","BufferHelper_1","require","Mylaps","EventEmitter","net","dgram","Long","Communicator","_super","_this","call","ESC","ESCx","SOR","EOR","ESCxB","broadcastAddress","broadcastPort","IsConnected","tcpClient","Socket","udpClient","createSocket","type","reuseAddr","bind","on","data","dataReceived","console","log","err","setBroadcast","discover","msg","emit","that","setInterval","sendDiscoverMessage","networkSettings","Buffer","from","send","length","sendGetTimeMessage","getTimeMessage","write","connect","decoder","ipAddress","messages","BufferHelper","Split","forEach","message","escapedData","unescape","toJSON","rawMessage","handleData","passing","getPassingData","emitPassing","status_1","getStatusData","emitStatus","getNetworkSettingsData","getTimeMessageData","emitTime","emitDecoder","decoderId","version","readUInt16LE","checksum","flags","extractDataRows","slice","lastIndexOf","dataRows","i","typeOfRecord","lengthOfRecord","rowData","j","push","dataToEscape","byte","index","escapedTo","microseconds","fromBytesLE","ms","div","epoch","Date","setUTCMilliseconds","toNumber","rtcTime","utcTime","readInt32LE","statusMessage","noiseLevel","readInt16LE","voltage","readInt8","inputVoltage","temperature","passingMessage","transponderId","passingTimeRTC","passingTimeUTC","signalStrength","signalHits","transponderVoltage","getTime","buffer","includeDelimiter","result","indexOf","move","mainWindow","getTimeInterval","createWindow","BrowserWindow","width","height","webPreferences","nodeIntegration","process","loadURL","webContents","openDevTools","undefined","transponderTemperature","clearInterval","app","allowRendererProcessReuse"],"mappings":"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,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA,qDAAqD,cAAc;;AAEnE;AACA;AACA,WAAW,EAAE;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa;AACb;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA,uBAAuB;;AAEvB;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,sBAAsB,8CAA8C;AAC/E,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,sBAAsB,8CAA8C;AAC/E,WAAW,SAAS;AACpB,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,gEAAgE,kBAAkB;AAClF,aAAa;AACb;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2EAA2E,kBAAkB;AAC7F;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,iFAAiF,qBAAqB;AACtG;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA,iFAAiF,qBAAqB;AACtG;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,iFAAiF,oBAAoB;AACrG;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,0FAA0F,2BAA2B;AACrH;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA,0FAA0F,2BAA2B;AACrH;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,oFAAoF,uBAAuB;AAC3G;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,6FAA6F,8BAA8B;AAC3H;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA,6FAA6F,8BAA8B;AAC3H;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yEAAyE,mBAAmB;AAC5F;AACA,WAAW,oBAAoB;AAC/B,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD,kBAAkB;AACrE;AACA,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+EAA+E,oBAAoB;AACnG;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4EAA4E,oBAAoB;AAChG;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mBAAmB;AAC1E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oEAAoE,kBAAkB;AACtF;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gEAAgE,kBAAkB;AAClF;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,gEAAgE,kBAAkB;AAClF;AACA,WAAW,oBAAoB;AAC/B,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6FAA6F,qBAAqB;AAClH;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6GAA6G,sBAAsB;AACnI;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,wGAAwG,8BAA8B;AACtI;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEA;AACA,wGAAwG,8BAA8B;AACtI;A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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./electron/main.ts\");\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BufferHelper_1 = require(\"./utils/BufferHelper\");\r\nvar Mylaps;\r\n(function (Mylaps) {\r\n    var EventEmitter = require(\"events\");\r\n    var net = require('net');\r\n    var dgram = require('dgram');\r\n    var Long = require('long');\r\n    var Communicator = /** @class */ (function (_super) {\r\n        __extends(Communicator, _super);\r\n        function Communicator() {\r\n            var _this = _super.call(this) || this;\r\n            // Escape character\r\n            _this.ESC = 0x8d;\r\n            // Value to subtract from escaped character (as integer)\r\n            _this.ESCx = 0x20;\r\n            // Start of record\r\n            _this.SOR = 0x8e;\r\n            // End of record\r\n            _this.EOR = 0x8f;\r\n            // Value to subtract from escaped character (as byte)\r\n            _this.ESCxB = 0x20;\r\n            _this.broadcastAddress = '255.255.255.255';\r\n            _this.broadcastPort = 5303;\r\n            _this.IsConnected = false;\r\n            _this.tcpClient = new net.Socket();\r\n            _this.udpClient = new dgram.createSocket({ type: \"udp4\", reuseAddr: true });\r\n            _this.udpClient.bind(_this.broadcastPort);\r\n            _this.udpClient.on('message', function (data) { _this.dataReceived(data); });\r\n            _this.udpClient.on('close', function () {\r\n                console.log(\"UDP CLOSED\");\r\n            });\r\n            _this.udpClient.on('listening', function (err) {\r\n                if (err)\r\n                    throw err;\r\n                _this.udpClient.setBroadcast(true);\r\n                _this.discover();\r\n            });\r\n            /**\r\n             * Emitted when data is received. The argument data will be a Buffer or String. Encoding of data is set by socket.setEncoding().\r\n             * Note that the data will be lost if there is no listener when a Socket emits a 'data' event.\r\n             */\r\n            _this.tcpClient.on('data', function (data) {\r\n                _this.dataReceived(data);\r\n            });\r\n            /**\r\n             * Emitted when a socket connection is successfully established. See net.createConnection().\r\n             */\r\n            _this.tcpClient.on('connect', function (msg) {\r\n                _this.IsConnected = true;\r\n                _this.emit('connect', msg);\r\n            });\r\n            /**\r\n             * Emitted when a socket is ready to be used.\r\n             * Triggered immediately after 'connect'.\r\n             */\r\n            _this.tcpClient.on('ready', function (msg) {\r\n                _this.emit('ready', msg);\r\n            });\r\n            /**\r\n             * Emitted when the other end of the socket sends a FIN packet, thus ending the readable side of the socket.\r\n             * By default (allowHalfOpen is false) the socket will send a FIN packet back and destroy its file descriptor once it has written out its\r\n             * pending write queue. However, if allowHalfOpen is set to true, the socket will not automatically end() its writable side, allowing the\r\n             * user to write arbitrary amounts of data. The user must call end() explicitly to close the connection (i.e. sending a FIN packet back).\r\n             */\r\n            _this.tcpClient.on('drain', function (msg) {\r\n                _this.emit('drain', msg);\r\n            });\r\n            /**\r\n             * Emitted when an error occurs. The 'close' event will be called directly following this event.\r\n             */\r\n            _this.tcpClient.on('error', function (msg) {\r\n                _this.emit('error', msg);\r\n            });\r\n            /**\r\n             * Emitted once the socket is fully closed. The argument hadError is a boolean which says if the socket was closed due to a transmission error.\r\n             * hadError: boolean - is true if the socket had a transmission error.\r\n             */\r\n            _this.tcpClient.on('close', function (msg) {\r\n                _this.IsConnected = false;\r\n                _this.emit('close', msg);\r\n            });\r\n            return _this;\r\n        }\r\n        Communicator.prototype.discover = function () {\r\n            var that = this;\r\n            setInterval(function () {\r\n                that.sendDiscoverMessage();\r\n            }, 4321);\r\n        };\r\n        Communicator.prototype.sendDiscoverMessage = function () {\r\n            var networkSettings = Buffer.from([0x8E, 0x02, 0x00, 0x00, 0x9C, 0x0D, 0x00, 0x00, 0x16, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0A, 0x00, 0x0C, 0x00, 0x8F]);\r\n            this.udpClient.send(networkSettings, 0, networkSettings.length, 5403, this.broadcastAddress, function (err) {\r\n                if (err)\r\n                    console.log(err);\r\n            });\r\n        };\r\n        Communicator.prototype.sendGetTimeMessage = function () {\r\n            var getTimeMessage = Buffer.from([0x8e, 0x02, 0x00, 0x00, 0xdb, 0x93, 0x00, 0x00, 0x24, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0a, 0x00, 0x0c, 0x00, 0x8f]);\r\n            this.tcpClient.write(getTimeMessage, 0, getTimeMessage.length);\r\n        };\r\n        Communicator.prototype.connect = function (decoder) {\r\n            var _this = this;\r\n            if (!this.IsConnected) {\r\n                this.tcpClient.connect(5403, decoder.ipAddress, function () {\r\n                    _this.emit('connected');\r\n                });\r\n            }\r\n        };\r\n        Communicator.prototype.dataReceived = function (data) {\r\n            var _this = this;\r\n            var messages = BufferHelper_1.BufferHelper.Split(data, this.EOR);\r\n            messages.forEach(function (message) {\r\n                // Simple sanity check. Assumes that the buffer only contains one message. This might not be the case!\r\n                if (data[0] == _this.SOR && data[data.length - 1] == _this.EOR) {\r\n                    var escapedData = _this.unescape(data);\r\n                    console.log(\"Escaped data\", escapedData.toJSON());\r\n                    var rawMessage = _this.handleData(escapedData);\r\n                    switch (rawMessage.type) {\r\n                        case 1:\r\n                            var passing = _this.getPassingData(rawMessage);\r\n                            _this.emitPassing(passing);\r\n                            break;\r\n                        case 2:\r\n                            var status_1 = _this.getStatusData(rawMessage);\r\n                            _this.emitStatus(status_1);\r\n                            break;\r\n                        case 0x16:\r\n                            var networkSettings = _this.getNetworkSettingsData(rawMessage);\r\n                            _this.connect(networkSettings);\r\n                            break;\r\n                        case 0x24:\r\n                            var getTimeMessage = _this.getTimeMessageData(rawMessage);\r\n                            _this.emitTime(getTimeMessage);\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        Communicator.prototype.emitTime = function (msg) {\r\n            this.emit('time', msg);\r\n        };\r\n        Communicator.prototype.emitStatus = function (msg) {\r\n            this.emit('status', msg);\r\n        };\r\n        Communicator.prototype.emitPassing = function (msg) {\r\n            this.emit('passing', msg);\r\n        };\r\n        Communicator.prototype.emitDecoder = function (msg) {\r\n            this.emit('decoder', { ipAddress: msg.ipAddress, decoderId: msg.decoderId });\r\n        };\r\n        Communicator.prototype.handleData = function (data) {\r\n            // 01 - Version (default = 02)\r\n            // 02 - length of record LSB\r\n            // 03 - length of record MSB\r\n            // 04 - CRC of record LSB\r\n            // 05 - CRC of record MSB\r\n            // 06 - Flags of record LSB\r\n            // 07 - Flags of record MSB\r\n            // 08 - TOR (Type of Message) LSB\r\n            // 09 - TOR (Type of Message) MSB\r\n            // Materialize the data to some kind of object and return it.\r\n            return {\r\n                version: data[0x01],\r\n                length: data.readUInt16LE(0x02),\r\n                checksum: data.readUInt16LE(0x04),\r\n                flags: data.readUInt16LE(0x06),\r\n                type: data.readUInt16LE(0x08),\r\n                data: this.extractDataRows(data.slice(0x0A, data.lastIndexOf(this.EOR)))\r\n            };\r\n        };\r\n        Communicator.prototype.extractDataRows = function (data) {\r\n            var dataRows = [];\r\n            for (var i = 0; i < data.length; i++) {\r\n                // Check that we did not hit the EOR\r\n                if (data[i] !== this.EOR) {\r\n                    // Get the type and length of the record\r\n                    var typeOfRecord = data[i];\r\n                    var lengthOfRecord = data[i + 1];\r\n                    var rowData = [];\r\n                    // Get the given amount of data from the record.\r\n                    for (var j = i + 2; j < i + lengthOfRecord + 2; j++) {\r\n                        // Store the value to the row\r\n                        if (i < data.length - 1 && j < data.length)\r\n                            rowData.push(data[j]);\r\n                    }\r\n                    // Push the row to the collection.\r\n                    dataRows.push({\r\n                        data: Buffer.from(rowData),\r\n                        type: typeOfRecord,\r\n                        length: lengthOfRecord\r\n                    });\r\n                    // Set i to start at the next row.\r\n                    i += lengthOfRecord + 1;\r\n                }\r\n            }\r\n            return dataRows;\r\n        };\r\n        Communicator.prototype.unescape = function (dataToEscape) {\r\n            // Create an array to keep our unescaped data.\r\n            var escapedData = [];\r\n            // Iterate all the bytes, one by one.\r\n            for (var i = 0; i < dataToEscape.length; i++) {\r\n                // Check for ESC byte.\r\n                if (dataToEscape[i] == this.ESC && ((i + 1) < dataToEscape.length - 1)) {\r\n                    // ESC byte found. Get the following byte and subtract with ESCxB.\r\n                    var byte = dataToEscape[i + 1];\r\n                    byte -= this.ESCxB;\r\n                    console.log(\"Data:\", dataToEscape.toJSON());\r\n                    console.log(\"Escaping!\", { index: i, length: dataToEscape.length, dataToEscape: dataToEscape[i + 1], escapedTo: byte });\r\n                    // Store the value into the buffer.\r\n                    escapedData.push(byte);\r\n                    // Skip one byte next iteration.\r\n                    i++;\r\n                }\r\n                else {\r\n                    // This byte does not need to be unescaped. Store it to the buffer.\r\n                    escapedData.push(dataToEscape[i]);\r\n                }\r\n            }\r\n            // Return an buffer created from the array.\r\n            return Buffer.from(escapedData);\r\n        };\r\n        Communicator.prototype.getTimeMessageData = function (rawMessage) {\r\n            var getTimeMessage = {};\r\n            // RTC_TIME = 0x01,\r\n            // FLAGS = 0x04,\r\n            // UTC_TIME = 0x05\r\n            rawMessage.data.forEach(function (d) {\r\n                switch (d.type) {\r\n                    case 0x01:\r\n                        // The time the transponder passed according to the decoders clock.\r\n                        // Microseconds since 1970-01-01. 'epoch'\r\n                        var microseconds = Long.fromBytesLE(d.data);\r\n                        // Since js does not support 64-bit unsigned integers we have to neglect some resolution and go with milliseconds... :/\r\n                        var ms = microseconds.div(1000);\r\n                        // 1970-01-01\r\n                        var epoch = new Date(0);\r\n                        // Add the number of milliseconds since 1970-01-01\r\n                        epoch.setUTCMilliseconds(ms.toNumber());\r\n                        // RTC\r\n                        getTimeMessage.rtcTime = epoch;\r\n                        break;\r\n                    case 0x05:\r\n                        // The time the transponder passed according to the decoders clock.\r\n                        // Microseconds since 1970-01-01. 'epoch'\r\n                        var microseconds = Long.fromBytesLE(d.data);\r\n                        // Since js does not support 64-bit unsigned integers we have to neglect some resolution and go with milliseconds... :/\r\n                        var ms = microseconds.div(1000);\r\n                        // 1970-01-01\r\n                        var epoch = new Date(0);\r\n                        // Add the number of milliseconds since 1970-01-01\r\n                        epoch.setUTCMilliseconds(ms.toNumber());\r\n                        // RTC\r\n                        getTimeMessage.utcTime = epoch;\r\n                        break;\r\n                }\r\n            });\r\n            return getTimeMessage;\r\n        };\r\n        Communicator.prototype.getNetworkSettingsData = function (rawMessage) {\r\n            var networkSettings = {};\r\n            rawMessage.data.forEach(function (d) {\r\n                switch (d.type) {\r\n                    case 0x81:\r\n                        // The decoder id\r\n                        // This is actually presented as raw hex values and not read as an integer. \r\n                        // TODO: Use hex string instead of integer?\r\n                        networkSettings.decoderId = d.data.readInt32LE(0);\r\n                        break;\r\n                    case 0x08:\r\n                        // The level of background noise on the loop.\r\n                        networkSettings.ipAddress = d.data[3] + \".\" + d.data[2] + \".\" + d.data[1] + \".\" + d.data[0];\r\n                        break;\r\n                }\r\n            });\r\n            return networkSettings;\r\n        };\r\n        Communicator.prototype.getStatusData = function (rawMessage) {\r\n            var statusMessage = {};\r\n            console.log(\"status data\", (rawMessage.data.length));\r\n            rawMessage.data.forEach(function (d) {\r\n                switch (d.type) {\r\n                    case 0x81:\r\n                        // The decoder id\r\n                        // This is actually presented as raw hex values and not read as an integer. \r\n                        // TODO: Use hex string instead of integer?\r\n                        statusMessage.decoderId = d.data.readInt32LE(0);\r\n                        break;\r\n                    case 0x01:\r\n                        // The level of background noise on the loop.\r\n                        statusMessage.noiseLevel = d.data.readInt16LE(0);\r\n                        break;\r\n                    case 0x0c:\r\n                        // The voltage provided to the decoder.\r\n                        var voltage = d.data.readInt8(0);\r\n                        // Convert to decimal. Ex. 11.9 is reported as 119.\r\n                        statusMessage.inputVoltage = (voltage > 0) ? voltage / 10 : 0;\r\n                        break;\r\n                    case 0x07:\r\n                        // The temperature of the decoder.\r\n                        statusMessage.temperature = d.data.readInt16LE(0);\r\n                        break;\r\n                }\r\n            });\r\n            return statusMessage;\r\n        };\r\n        Communicator.prototype.getPassingData = function (rawMessage) {\r\n            var passingMessage = {};\r\n            rawMessage.data.forEach(function (d) {\r\n                switch (d.type) {\r\n                    case 0x81:\r\n                        // The decoder id\r\n                        // This is actually presented as raw hex values and not read as an integer. \r\n                        // TODO: Use hex string instead of integer?\r\n                        passingMessage.decoderId = d.data.readInt32LE(0);\r\n                        break;\r\n                    case 0x03:\r\n                        // 7 digits that are unique for the transponder that's passing.\r\n                        passingMessage.transponderId = d.data.readInt32LE(0);\r\n                        break;\r\n                    case 0x04:\r\n                        // The time the transponder passed according to the decoders clock.\r\n                        // Microseconds since 1970-01-01. 'epoch'\r\n                        var microseconds = Long.fromBytesLE(d.data);\r\n                        // Since js does not support 64-bit unsigned integers we have to neglect some resolution and go with milliseconds... :/\r\n                        var ms = microseconds.div(1000);\r\n                        // 1970-01-01\r\n                        var epoch = new Date(0);\r\n                        // Add the number of milliseconds since 1970-01-01\r\n                        epoch.setUTCMilliseconds(ms.toNumber());\r\n                        // RTC\r\n                        passingMessage.passingTimeRTC = epoch;\r\n                        break;\r\n                    case 0x10:\r\n                        // The time the transponder passed when a GPS is connected to the decoder. Thus giving us UTC.\r\n                        // Microseconds since 1970-01-01. 'epoch'\r\n                        var microseconds = Long.fromBytesLE(d.data);\r\n                        // Since js does not support 64-bit unsigned integers we have to neglect some resolution and go with milliseconds... :/\r\n                        var ms = microseconds.div(1000);\r\n                        // 1970-01-01\r\n                        var epoch = new Date(0);\r\n                        // Add the number of milliseconds since 1970-01-01\r\n                        epoch.setUTCMilliseconds(ms.toNumber());\r\n                        // UTC\r\n                        passingMessage.passingTimeUTC = epoch;\r\n                        break;\r\n                    case 0x05:\r\n                        // The signal strength.\r\n                        passingMessage.signalStrength = d.data.readInt16LE(0);\r\n                        break;\r\n                    case 0x06:\r\n                        // The number of the times the transponders signal was detected by the loop during the pass.\r\n                        passingMessage.signalHits = d.data.readInt16LE(0);\r\n                        break;\r\n                    case 0x30:\r\n                        // The transponders reported voltage.\r\n                        passingMessage.transponderVoltage = d.data.readInt8(0);\r\n                        break;\r\n                }\r\n            });\r\n            return passingMessage;\r\n        };\r\n        Communicator.prototype.getTime = function () {\r\n            this.sendGetTimeMessage();\r\n        };\r\n        return Communicator;\r\n    }(EventEmitter));\r\n    Mylaps.Communicator = Communicator;\r\n})(Mylaps = exports.Mylaps || (exports.Mylaps = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BufferHelper = /** @class */ (function () {\r\n    function BufferHelper() {\r\n    }\r\n    BufferHelper.Split = function (buffer, value, includeDelimiter) {\r\n        if (includeDelimiter === void 0) { includeDelimiter = true; }\r\n        var index;\r\n        var result = [];\r\n        while ((index = buffer.indexOf(value)) > -1) {\r\n            console.log(\"EOR\", buffer.indexOf(value));\r\n            console.log(\"this\", buffer.toJSON());\r\n            var move = index + (includeDelimiter ? 1 : 0);\r\n            result.push(buffer.slice(0, move));\r\n            buffer = buffer.slice(move);\r\n            console.log(\"next\", buffer.toJSON());\r\n        }\r\n        return result;\r\n    };\r\n    return BufferHelper;\r\n}());\r\nexports.BufferHelper = BufferHelper;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","import { app, BrowserWindow } from 'electron';\r\nimport * as path from 'path';\r\nimport * as url from 'url';\r\nimport { Mylaps } from '../../mylaps-amb/dist'\r\n\r\nlet mainWindow: Electron.BrowserWindow | null;\r\nlet getTimeInterval: NodeJS.Timeout | null;\r\n\r\nfunction createWindow() {\r\n  mainWindow = new BrowserWindow({\r\n    width: 1440,\r\n    height: 900,\r\n    webPreferences: {\r\n      nodeIntegration: true,\r\n    },\r\n  });\r\n\r\n  if (process.env.NODE_ENV === 'development') {\r\n    mainWindow.loadURL(`http://localhost:4000`);\r\n    mainWindow.webContents.openDevTools();\r\n  } else {\r\n    mainWindow.loadURL(\r\n      url.format({\r\n        pathname: path.join(__dirname, '../index.html'),\r\n        protocol: 'file:',\r\n        slashes: true\r\n      })\r\n    );\r\n  }\r\n\r\n  const decoder = new Mylaps.Communicator();\r\n  decoder.on('connect', (msg) => {\r\n\r\n    decoder.getTime();\r\n    // request the decoders rtc every 5 minutes.\r\n    getTimeInterval = setInterval(() => {\r\n      decoder.getTime()\r\n    }, 60 * 1000)\r\n  });\r\n\r\n  decoder.on('time', (msg) => {\r\n    mainWindow.webContents.send('amb-time', msg);\r\n  })\r\n\r\n  decoder.on('status', (msg) => {\r\n    mainWindow.webContents.send('amb-status', msg);\r\n  });\r\n\r\n  decoder.on('passing', (msg) => {\r\n    let message = {\r\n      decoderId: msg.decoderId,\r\n      passingTimeRTC: msg.passingTimeRTC ? msg.passingTimeRTC.getTime() : undefined,\r\n      passingTimeUTC: msg.passingTimeUTC ? msg.passingTimeUTC.getTime() : undefined,\r\n      signalHits: msg.signalHits,\r\n      signalStrength: msg.signalStrength,\r\n      transponderId: msg.transponderId,\r\n      transponderTemperature: msg.transponderTemperature,\r\n      transponderVoltage: msg.transponderVoltage\r\n    }\r\n\r\n    mainWindow.webContents.send('amb-passing', message);\r\n  });\r\n\r\n  decoder.on('connect', (msg) => {\r\n    mainWindow.webContents.send('amb-connected', msg);\r\n  })\r\n\r\n  decoder.on('error', (msg) => {\r\n    clearInterval(getTimeInterval);\r\n    mainWindow.webContents.send('amb-disconnected', msg);\r\n  });\r\n\r\n  decoder.on('close', (msg) => {\r\n    clearInterval(getTimeInterval);\r\n    mainWindow.webContents.send('amb-disconnected', msg);\r\n  });\r\n\r\n  mainWindow.on('closed', () => {\r\n    mainWindow = null;\r\n  });\r\n}\r\n\r\napp.on('ready', createWindow);\r\napp.allowRendererProcessReuse = true;","module.exports = require(\"dgram\");","module.exports = require(\"electron\");","module.exports = require(\"events\");","module.exports = require(\"net\");","module.exports = require(\"path\");","module.exports = require(\"url\");"],"sourceRoot":""}